Example 1

>>> import numexpr as ne
>>> import numpy as np
>>> a = np.arange(1_000_000)
>>> b = np.arange(1_000_000)

>>> %timeit 10 * a - 5 * b
3.7 ms ± 6.65 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

>>> %timeit ne.evaluate('10*a-5*b')
1.24 ms ± 26.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

numexpr 3x faster!

Example 2

>>> import numexpr as ne
>>> import numpy as np
>>> x1 = np.random.random(1_000_000)
>>> x2 = np.random.random(1_000_000)
>>> y1 = np.random.random(1_000_000)
>>> y2 = np.random.random(1_000_000)

>>> %%timeit -n100 -r10
... c=np.sqrt((x1-x2)**2+(y1-y2)**2)>0.5
13.8 ms ± 176 µs per loop (mean ± std. dev. of 10 runs, 100 loops each)

>>> %%timeit -n100 -r10
... c = ne.evaluate('sqrt((x1-x2)**2+(y1-y2)**2)>0.5')
1.38 ms ± 152 µs per loop (mean ± std. dev. of 10 runs, 100 loops each)

numexpr 10x faster!
